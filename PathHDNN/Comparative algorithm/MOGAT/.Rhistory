te<-read.csv("D:\\a.csv", header = FALSE, stringsAsFactors = FALSE)
View(te)
te=te$V2+1
pre<-pre[te,]
View(pre)
true<-datMeta[te,]
View(true)
View(pre)
View(true)
View(pre)
View(true)
View(pre)
##结果保存
pre<-read.csv("D:\\b.csv", header = TRUE, stringsAsFactors = FALSE)
te<-read.csv("D:\\a.csv", header = FALSE, stringsAsFactors = FALSE)
View(pre)
View(te)
View(pre)
##结果保存
pre<-read.csv("D:\\b.csv", header =FALSE, stringsAsFactors = FALSE)
View(pre)
View(g_path)
##结果保存
pre<-read.csv("D:\\b.csv", header =FALSE, stringsAsFactors = FALSE)
te<-read.csv("D:\\a.csv", header = FALSE, stringsAsFactors = FALSE)
View(pre)
View(te)
##结果保存
pre<-read.csv("D:\\b.csv", header =FALSE, stringsAsFactors = FALSE)
te<-read.csv("D:\\a.csv", header = FALSE, stringsAsFactors = FALSE)
te=te$V2+1
pre<-pre[te,]
true<-datMeta[te,]
pre<-cbind(true,pre)
View(pre)
View(pre)
pre<-pre[,-3]
colnames(pre)[3]<-"pred"
View(pre)
write.csv(pre, file = "D:\\predict.csv", row.names = FALSE, quote = FALSE)
View(path_xun)
datMeta_xun<-read.csv("D:\\验证（乳腺癌亚型）\\数据（更新）\\验\\BRCA_clinical_4subtype_1551.csv", header = TRUE, stringsAsFactors = FALSE)
View(datMeta_xun)
View(path_xun)
corr_path_xun <- cor(t(path_xun), method = "pearson")
View(corr_path_xun)
# 调用函数
k <- 15
knn_path_xun <- make.knn.graph(corr_path_xun, k)
g_path_xun <- knn_path_xun$graph
g_path_xun<- simplify(g_path_xun, remove.multiple=TRUE, remove.loops=TRUE)
g_path_xun <- delete_vertices(g_path_xun, degree(g_path_xun)==0)
V(g_path_xun)$name <- rownames(path_xun)
V(g_path_xun)$class <- as.character(datMeta_xun$PAM50Call_RNAseq)
V(g_path_xun)$color <- as.numeric(as.factor(V(g_path_xun)$class))
V(g_path_xun)$vertex.frame.color <- "black"
g_path_xun<-as_long_data_frame(g_path_xun)
View(g_path_xun)
#write.csv(g_path, file = "D:\\path_graph.csv", row.names = FALSE, quote = FALSE)
corr_cell_xun <- cor(t(cell_xun), method = "pearson")
View(corr_cell_xun)
# 调用函数
k <- 15
knn_cell_xun <- make.knn.graph(corr_cell_xun, k)
g_cell_xun <- knn_cell_xun$graph
g_cell_xun<- simplify(g_cell_xun, remove.multiple=TRUE, remove.loops=TRUE)
g_cell_xun <- delete_vertices(g_cell_xun, degree(g_cell_xun)==0)
V(g_cell_xun)$name <- rownames(cell_xun)
V(g_cell_xun)$class <- as.character(datMeta_xun$PAM50Call_RNAseq)
V(g_cell_xun)$color <- as.numeric(as.factor(V(g_cell_xun)$class))
V(g_cell_xun)$vertex.frame.color <- "black"
g_cell_xun<-as_long_data_frame(g_cell_xun)
# 1. 读取网络数据
network1_xun <- g_path_xun
network2_xun <- g_cell_xun
# 2. 构建图
g1_xun <- create_graph(network1_xun)
g2_xun <- create_graph(network2_xun)
# 3. 提取邻接矩阵
adjacency_matrix1_xun <- as.matrix(as_adjacency_matrix(g1_xun))
adjacency_matrix2_xun <- as.matrix(as_adjacency_matrix(g2_xun))
# 4. 计算相似性矩阵
adjacency_graphs_xun <- list(adj1 = adjacency_matrix1_xun, adj2 = adjacency_matrix2_xun)
K = 15  # number of neighbors
T = 10  # Number of Iterations
W_xun = SNF(adjacency_graphs_xun, K, T)
rownames(W_xun)<-rownames(path_xun)
colnames(W_xun)<-rownames(path_xun)
# 6. 生成最终图
# 指定患者 ID 列和特征列
idx <- 'sampleID'
trait <- 'PAM50Call_RNAseq'
sub_mod_list <- c("path", "cell")  # 根据你的模态命名
final_graph_xun <- snf.to.graph(W_xun, datMeta_xun, trait, idx, sub_mod_list)
g_xun <- make.knn.graph(W_xun , 15)
g_xun <- g_xun$graph
g_xun <- simplify(g_xun, remove.multiple=TRUE, remove.loops=TRUE)
# Remove any vertices remaining that have no edges
g_xun <- delete.vertices(g_xun, degree(g_xun)==0)
# Assign names to the graph vertices
V(g_xun)$name <- datMeta_xun$sampleID
V(g_xun)$class <- datMeta_xun$PAM50Call_RNAseq
V(g_xun)$color <- as.numeric(as.factor(V(g_xun)$class))
V(g_xun)$vertex.frame.color <- "black"
print(length(V(g_xun)))
g_xun<-as_long_data_frame(g_xun)
View(g_xun)
write.csv(g_xun, file = "D:\\snf_graph.csv", row.names = FALSE, quote = FALSE)
write.csv(g_path_xun, file = "D:\\path_graph.csv", row.names = FALSE, quote = FALSE)
write.csv(g_cell_xun, file = "D:\\cell_graph.csv", row.names = FALSE, quote = FALSE)
View(g_cell_xun)
View(g_xun)
View(path_xun)
write.csv(path_xun, file = "D:\\path.csv", row.names = TRUE, quote = FALSE)
write.csv(cell_xun, file = "D:\\cell.csv", row.names = TRUE, quote = FALSE)
colnames(datMeta_xun)<-c("sample_id","diagnosis")
write.csv(datMeta_xun, file = "D:\\labels.csv", row.names = FALSE, quote = FALSE)
library(caret)
term<-read.csv("D:\\验证（乳腺癌亚型）\\数据（更新）\\训\\metabric_term_1551.csv", header = TRUE, stringsAsFactors = FALSE)
load("D:/验证（乳腺癌亚型）/数据（更新）/训/label.RData")
View(term)
View(label)
View(term)
View(term)
term<-term[,order(colnames(term))]
View(term)
set.seed(123)
set.seed(123)
# 存储结果的列表
train_sets <- list()
test_sets <- list()
train_labels <- list()
test_labels <- list()
View(term)
View(label)
term<-as.data.frame(t(term))
View(term)
# 合并表达谱和标签数据
combined_data <- cbind(term,label$CLAUDIN_SUBTYPE)
# 设置随机种子以确保结果可重复
set.seed(123)
# 存储结果的列表
train_sets <- list()
test_sets <- list()
train_labels <- list()
test_labels <- list()
# 进行五次随机划分
for (i in 1:5) {
# 创建数据划分
index <- createDataPartition(combined_data$`label$CLAUDIN_SUBTYPE`, p = 0.8, list = FALSE)
# 划分训练集和测试集
train_data <- combined_data[index, ]
test_data <- combined_data[-index, ]
# 存储训练集和测试集
train_sets[[i]] <- train_data
test_sets[[i]] <- test_data
# 存储标签
train_labels[[i]] <- train_data$Label
test_labels[[i]] <- test_data$Label
}
View(train_data)
View(train_labels)
View(test_data)
# 进行五次随机划分
for (i in 1:5) {
# 创建数据划分
index <- createDataPartition(combined_data$`label$CLAUDIN_SUBTYPE`, p = 0.8, list = FALSE)
# 划分训练集和测试集
train_data <- combined_data[index, ]
test_data <- combined_data[-index, ]
# 存储训练集和测试集
train_sets[[i]] <- train_data
test_sets[[i]] <- test_data
}
View(test_sets)
View(train_labels)
View(train_labels)
View(test_labels)
View(test_sets)
# 设置随机种子以确保结果可重复
set.seed(123)
# 存储结果的列表
train_sets <- list()
test_sets <- list()
# 进行五次随机划分
for (i in 1:5) {
# 创建数据划分
index <- createDataPartition(combined_data$`label$CLAUDIN_SUBTYPE`, p = 0.8, list = FALSE)
# 划分训练集和测试集
train_data <- combined_data[index, ]
test_data <- combined_data[-index, ]
# 存储训练集和测试集
train_sets[[i]] <- train_data
test_sets[[i]] <- test_data
# 将训练集和测试集写入 D 盘
write.csv(train_data, file = paste0("D:/train_set_fold_", i, ".csv"), row.names = TRUE)
write.csv(test_data, file = paste0("D:/test_set_fold_", i, ".csv"), row.names =TRUE)
}
library(readxl)
install.packages("readxl")
library(readxl)
# 读取 XLSX 文件
data <- read_excel("D:\\比较方法\\MOGONET\\新数据\\2\\1_te.xlsx")  # 替换为您的文件路径
View(data)
# 将数据框保存为 CSV 文件
write.csv(data, "D:\\比较方法\\MOGONET\\新数据\\2\\1_te.xlsx", row.names = FALSE)  # 替换为您想要保存的路径
# 读取 XLSX 文件
data <- read_excel("D:\\比较方法\\MOGONET\\新数据\\2\\1_tr.xlsx")  # 替换为您的文件路径
# 将数据框保存为 CSV 文件
write.csv(data, "D:\\比较方法\\MOGONET\\新数据\\2\\1_tr.xlsx", row.names = FALSE)  # 替换为您想要保存的路径
# 读取 XLSX 文件
data <- read_excel("D:\\比较方法\\MOGONET\\新数据\\2\\1_te.xlsx")  # 替换为您的文件路径
# 读取 XLSX 文件
data <- read_excel("D:\\比较方法\\MOGONET\\新数据\\3\\1_te.xlsx")  # 替换为您的文件路径
# 将数据框保存为 CSV 文件
write.csv(data, "D:\\比较方法\\MOGONET\\新数据\\3\\1_te.csv", row.names = FALSE)  # 替换为您想要保存的路径
# 读取 XLSX 文件
data <- read_excel("D:\\比较方法\\MOGONET\\新数据\\3\\1_tr.xlsx")  # 替换为您的文件路径
# 将数据框保存为 CSV 文件
write.csv(data, "D:\\比较方法\\MOGONET\\新数据\\3\\1_tr.csv", row.names = FALSE)  # 替换为您想要保存的路径
# 读取 XLSX 文件
data <- read_excel("D:\\比较方法\\MOGONET\\新数据\\3\\2_te.xlsx")  # 替换为您的文件路径
# 将数据框保存为 CSV 文件
write.csv(data, "D:\\比较方法\\MOGONET\\新数据\\3\\2_te.csv", row.names = FALSE)  # 替换为您想要保存的路径
# 读取 XLSX 文件
data <- read_excel("D:\\比较方法\\MOGONET\\新数据\\3\\2_tr.xlsx")  # 替换为您的文件路径
# 将数据框保存为 CSV 文件
write.csv(data, "D:\\比较方法\\MOGONET\\新数据\\3\\2_tr.xlsx", row.names = FALSE)  # 替换为您想要保存的路径
# 读取 XLSX 文件
data <- read_excel("D:\\比较方法\\MOGONET\\新数据\\4\\1_te.xlsx")  # 替换为您的文件路径
# 将数据框保存为 CSV 文件
write.csv(data, "D:\\比较方法\\MOGONET\\新数据\\4\\1_te.csv", row.names = FALSE)  # 替换为您想要保存的路径
# 读取 XLSX 文件
data <- read_excel("D:\\比较方法\\MOGONET\\新数据\\4\\1_tr.xlsx")  # 替换为您的文件路径
# 将数据框保存为 CSV 文件
write.csv(data, "D:\\比较方法\\MOGONET\\新数据\\4\\1_tr.csv", row.names = FALSE)  # 替换为您想要保存的路径
# 读取 XLSX 文件
data <- read_excel("D:\\比较方法\\MOGONET\\新数据\\4\\2_te.xlsx")  # 替换为您的文件路径
# 将数据框保存为 CSV 文件
write.csv(data, "D:\\比较方法\\MOGONET\\新数据\\4\\2_te.csv", row.names = FALSE)  # 替换为您想要保存的路径
# 读取 XLSX 文件
data <- read_excel("D:\\比较方法\\MOGONET\\新数据\\4\\2_tr.xlsx")  # 替换为您的文件路径
# 将数据框保存为 CSV 文件
write.csv(data, "D:\\比较方法\\MOGONET\\新数据\\4\\2_tr.csv", row.names = FALSE)  # 替换为您想要保存的路径
# 读取 XLSX 文件
data <- read_excel("D:\\比较方法\\MOGONET\\新数据\\4\\labels_te.xlsx")  # 替换为您的文件路径
View(data)
# 将数据框保存为 CSV 文件
write.csv(data, "D:\\比较方法\\MOGONET\\新数据\\3\\labels_te.csv", row.names = FALSE)  # 替换为您想要保存的路径
# 将数据框保存为 CSV 文件
write.csv(data, "D:\\比较方法\\MOGONET\\新数据\\4\\labels_te.csv", row.names = FALSE)  # 替换为您想要保存的路径
# 读取 XLSX 文件
data <- read_excel("D:\\比较方法\\MOGONET\\新数据\\4\\labels_tr.xlsx")  # 替换为您的文件路径
# 将数据框保存为 CSV 文件
write.csv(data, "D:\\比较方法\\MOGONET\\新数据\\4\\labels_tr.csv", row.names = FALSE)  # 替换为您想要保存的路径
term<-read.csv("D:\\验证（乳腺癌亚型）\\数据（更新）\\训\\metabric_term_1551.csv", header = TRUE, stringsAsFactors = FALSE)
load("D:\\验证（乳腺癌亚型）\\数据（更新）\\训\\label.RData")
term<-term[,order(colnames(term))]
View(term)
View(label)
# 加载必要的库
set.seed(123)  # 为了可重复的随机结果
# 加载必要的库
set.seed(123)  # 为了可重复的随机结果
# 1. 按 8:2 的比例随机分割样本
n_samples <- ncol(term)
indices <- sample(1:n_samples, n_samples)  # 随机打乱样本顺序
train_indices <- indices[1:round(0.8 * n_samples)]  # 训练集索引
test_indices <- indices[(round(0.8 * n_samples) + 1):n_samples]  # 测试集索引
train_data <- term[, train_indices]  # 训练集
test_data <- term[, test_indices]  # 测试集
train_labels <- label[train_indices]
train_labels <- label[train_indices,]
test_labels <- label[test_indices,]
View(train_data)
View(train_labels)
View(train_data)
View(train_labels)
# 2. 将特征分为前 343 行和后面的行
# 确保特征行数大于 343
if (nrow(expr_data) >= 343) {
train_data_first_half <- train_data[1:343, ]
train_data_second_half <- train_data[-(1:343), ]
train_labels_first_half <- train_labels  # 标签不需要分组，保持一致
train_labels_second_half <- train_labels
test_data_first_half <- test_data[1:343, ]
test_data_second_half <- test_data[-(1:343), ]
test_labels_first_half <- test_labels  # 标签不需要分组，保持一致
test_labels_second_half <- test_labels
} else {
stop("特征行数少于343行")
}
# 2. 将特征分为前 343 行和后面的行
# 确保特征行数大于 343
if (nrow(term) >= 343) {
train_data_first_half <- train_data[1:343, ]
train_data_second_half <- train_data[-(1:343), ]
train_labels_first_half <- train_labels  # 标签不需要分组，保持一致
train_labels_second_half <- train_labels
test_data_first_half <- test_data[1:343, ]
test_data_second_half <- test_data[-(1:343), ]
test_labels_first_half <- test_labels  # 标签不需要分组，保持一致
test_labels_second_half <- test_labels
} else {
stop("特征行数少于343行")
}
View(test_labels_first_half)
View(test_labels_second_half)
View(train_data_first_half)
train_data_first_half<-as.data.frame(t(train_data_first_half))
View(train_data_first_half)
write.csv(train_data_first_half, "D:\\比较方法\\MOGONET\\新数据\\1\\1_tr.csv", row.names = FALSE,header=FALSE)  # 替换为您想要保存的路径
write.csv(train_data_first_half, "D:\\比较方法\\MOGONET\\新数据\\1\\1_tr.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
train_data_second_half<-as.data.frame(t(train_data_second_half))
write.csv(train_data_second_half, "D:\\比较方法\\MOGONET\\新数据\\1\\2_tr.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
test_data_first_half<-as.data.frame(t(test_data_first_half))
write.csv(test_data_first_half, "D:\\比较方法\\MOGONET\\新数据\\1\\1_te.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
write.csv(train_data_second_half, "D:\\比较方法\\MOGONET\\新数据\\1\\2_te.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
write.csv(train_labels, "D:\\比较方法\\MOGONET\\新数据\\1\\label_train.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(test_labels, "D:\\比较方法\\MOGONET\\新数据\\1\\label_test.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(train_labels$CLAUDIN_SUBTYPE, "D:\\比较方法\\MOGONET\\新数据\\1\\label_tr.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(test_labels$PATIENT_ID, "D:\\比较方法\\MOGONET\\新数据\\1\\label_te.csv", row.names = FALSE)  # 替换为您想要保存的路径
term<-read.csv("D:\\验证（乳腺癌亚型）\\数据（更新）\\训\\metabric_term_1551.csv", header = TRUE, stringsAsFactors = FALSE)
load("D:\\验证（乳腺癌亚型）\\数据（更新）\\训\\label.RData")
term<-term[,order(colnames(term))]
# 加载必要的库
set.seed(123)  # 为了可重复的随机结果
# 1. 按 8:2 的比例随机分割样本
n_samples <- ncol(term)
indices <- sample(1:n_samples, n_samples)  # 随机打乱样本顺序
train_indices <- indices[1:round(0.8 * n_samples)]  # 训练集索引
test_indices <- indices[(round(0.8 * n_samples) + 1):n_samples]  # 测试集索引
# 加载必要的库
set.seed(456)  # 为了可重复的随机结果
# 1. 按 8:2 的比例随机分割样本
n_samples <- ncol(term)
indices <- sample(1:n_samples, n_samples)  # 随机打乱样本顺序
train_indices <- indices[1:round(0.8 * n_samples)]  # 训练集索引
test_indices <- indices[(round(0.8 * n_samples) + 1):n_samples]  # 测试集索引
train_data <- term[, train_indices]  # 训练集
test_data <- term[, test_indices]  # 测试集
train_labels <- label[train_indices,]
test_labels <- label[test_indices,]
# 2. 将特征分为前 343 行和后面的行
# 确保特征行数大于 343
if (nrow(term) >= 343) {
train_data_first_half <- train_data[1:343, ]
train_data_second_half <- train_data[-(1:343), ]
test_data_first_half <- test_data[1:343, ]
test_data_second_half <- test_data[-(1:343), ]
} else {
stop("特征行数少于343行")
}
train_data_first_half<-as.data.frame(t(train_data_first_half))
write.csv(train_data_first_half, "D:\\比较方法\\MOGONET-main\\2\\1_tr.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
write.csv(train_data_first_half, "D:\\MOGONET-main\\2\\1_tr.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
write.csv(train_data_first_half, "D:\\MOGONET-main\\2\\1_tr.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
train_data_second_half<-as.data.frame(t(train_data_second_half))
write.csv(train_data_second_half, "D:\\MOGONET\\新数据\\2\\2_tr.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
write.csv(train_data_second_half, "D:\\MOGONET\\2\\2_tr.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
test_data_first_half<-as.data.frame(t(test_data_first_half))
write.csv(test_data_first_half, "D:\\MOGONET\\2\\1_te.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
# 2. 将特征分为前 343 行和后面的行
# 确保特征行数大于 343
if (nrow(term) >= 343) {
train_data_first_half <- train_data[1:343, ]
train_data_second_half <- train_data[-(1:343), ]
test_data_first_half <- test_data[1:343, ]
test_data_second_half <- test_data[-(1:343), ]
} else {
stop("特征行数少于343行")
}
train_data_first_half<-as.data.frame(t(train_data_first_half))
write.csv(train_data_first_half, "D:\\MOGONET-main\\2\\1_tr.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
train_data_second_half<-as.data.frame(t(train_data_second_half))
write.csv(train_data_second_half, "D:\\MOGONET-main\\2\\2_tr.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
test_data_first_half<-as.data.frame(t(test_data_first_half))
write.csv(test_data_first_half, "D:\\MOGONET-main\\2\\1_te.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
test_data_second_half<-as.data.frame(t(test_data_second_half))
write.csv(train_data_second_half, "D:\\MOGONET-main\\2\\2_te.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
write.csv(train_labels, "D:\\MOGONET-main\\2\\label_train.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(train_labels$CLAUDIN_SUBTYPE, "D:\\MOGONET-main\\2\\label_tr.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(test_labels$PATIENT_ID, "D:\\MOGONET-main\\2\\label_te.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(test_labels, "D:\\MOGONET-main\\2\\label_test.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(test_labels$CLAUDIN_SUBTYPE, "D:\\MOGONET-main\\2\\label_te.csv", row.names = FALSE)  # 替换为您想要保存的路径
term<-read.csv("D:\\验证（乳腺癌亚型）\\数据（更新）\\训\\metabric_term_1551.csv", header = TRUE, stringsAsFactors = FALSE)
load("D:\\验证（乳腺癌亚型）\\数据（更新）\\训\\label.RData")
term<-term[,order(colnames(term))]
# 加载必要的库
set.seed(789)  # 更改
# 1. 按 8:2 的比例随机分割样本
n_samples <- ncol(term)
indices <- sample(1:n_samples, n_samples)  # 随机打乱样本顺序
train_indices <- indices[1:round(0.8 * n_samples)]  # 训练集索引
test_indices <- indices[(round(0.8 * n_samples) + 1):n_samples]  # 测试集索引
train_data <- term[, train_indices]  # 训练集
test_data <- term[, test_indices]  # 测试集
train_labels <- label[train_indices,]
test_labels <- label[test_indices,]
# 2. 将特征分为前 343 行和后面的行
# 确保特征行数大于 343
if (nrow(term) >= 343) {
train_data_first_half <- train_data[1:343, ]
train_data_second_half <- train_data[-(1:343), ]
test_data_first_half <- test_data[1:343, ]
test_data_second_half <- test_data[-(1:343), ]
} else {
stop("特征行数少于343行")
}
train_data_first_half<-as.data.frame(t(train_data_first_half))
write.csv(train_data_first_half, "D:\\MOGONET-main\\3\\1_tr.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
train_data_second_half<-as.data.frame(t(train_data_second_half))
write.csv(train_data_second_half, "D:\\MOGONET-main\\3\\2_tr.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
test_data_first_half<-as.data.frame(t(test_data_first_half))
write.csv(test_data_first_half, "D:\\MOGONET-main\\3\\1_te.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
test_data_second_half<-as.data.frame(t(test_data_second_half))
write.csv(train_data_second_half, "D:\\MOGONET-main\\3\\2_te.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
write.csv(train_labels, "D:\\MOGONET-main\\3\\label_train.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(test_labels, "D:\\MOGONET-main\\3\\label_test.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(train_labels$CLAUDIN_SUBTYPE, "D:\\MOGONET-main\\3\\label_tr.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(test_labels$CLAUDIN_SUBTYPE, "D:\\MOGONET-main\\3\\label_te.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(train_labels$CLAUDIN_SUBTYPE, "D:\\MOGONET-main\\3\\labels_tr.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(test_labels$CLAUDIN_SUBTYPE, "D:\\MOGONET-main\\3\\labels_te.csv", row.names = FALSE)  # 替换为您想要保存的路径
term<-read.csv("D:\\验证（乳腺癌亚型）\\数据（更新）\\训\\metabric_term_1551.csv", header = TRUE, stringsAsFactors = FALSE)
load("D:\\验证（乳腺癌亚型）\\数据（更新）\\训\\label.RData")
term<-term[,order(colnames(term))]
# 加载必要的库
set.seed(101)  # 更改
# 1. 按 8:2 的比例随机分割样本
n_samples <- ncol(term)
indices <- sample(1:n_samples, n_samples)  # 随机打乱样本顺序
train_indices <- indices[1:round(0.8 * n_samples)]  # 训练集索引
test_indices <- indices[(round(0.8 * n_samples) + 1):n_samples]  # 测试集索引
train_data <- term[, train_indices]  # 训练集
test_data <- term[, test_indices]  # 测试集
train_labels <- label[train_indices,]
test_labels <- label[test_indices,]
# 2. 将特征分为前 343 行和后面的行
# 确保特征行数大于 343
if (nrow(term) >= 343) {
train_data_first_half <- train_data[1:343, ]
train_data_second_half <- train_data[-(1:343), ]
test_data_first_half <- test_data[1:343, ]
test_data_second_half <- test_data[-(1:343), ]
} else {
stop("特征行数少于343行")
}
train_data_first_half<-as.data.frame(t(train_data_first_half))
write.csv(train_data_first_half, "D:\\MOGONET-main\\4\\1_tr.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
train_data_second_half<-as.data.frame(t(train_data_second_half))
write.csv(train_data_second_half, "D:\\MOGONET-main\\4\\2_tr.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
test_data_first_half<-as.data.frame(t(test_data_first_half))
write.csv(test_data_first_half, "D:\\MOGONET-main\\4\\1_te.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
test_data_second_half<-as.data.frame(t(test_data_second_half))
write.csv(train_data_second_half, "D:\\MOGONET-main\\4\\2_te.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
write.csv(train_labels, "D:\\MOGONET-main\\4\\label_train.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(test_labels, "D:\\MOGONET-main\\4\\label_test.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(train_labels$CLAUDIN_SUBTYPE, "D:\\MOGONET-main\\4\\labels_tr.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(test_labels$CLAUDIN_SUBTYPE, "D:\\MOGONET-main\\4\\labels_te.csv", row.names = FALSE)  # 替换为您想要保存的路径
term<-read.csv("D:\\验证（乳腺癌亚型）\\数据（更新）\\训\\metabric_term_1551.csv", header = TRUE, stringsAsFactors = FALSE)
load("D:\\验证（乳腺癌亚型）\\数据（更新）\\训\\label.RData")
term<-term[,order(colnames(term))]
# 加载必要的库
set.seed(202)  # 更改
# 1. 按 8:2 的比例随机分割样本
n_samples <- ncol(term)
indices <- sample(1:n_samples, n_samples)  # 随机打乱样本顺序
train_indices <- indices[1:round(0.8 * n_samples)]  # 训练集索引
test_indices <- indices[(round(0.8 * n_samples) + 1):n_samples]  # 测试集索引
train_data <- term[, train_indices]  # 训练集
test_data <- term[, test_indices]  # 测试集
train_labels <- label[train_indices,]
test_labels <- label[test_indices,]
# 2. 将特征分为前 343 行和后面的行
# 确保特征行数大于 343
if (nrow(term) >= 343) {
train_data_first_half <- train_data[1:343, ]
train_data_second_half <- train_data[-(1:343), ]
test_data_first_half <- test_data[1:343, ]
test_data_second_half <- test_data[-(1:343), ]
} else {
stop("特征行数少于343行")
}
train_data_first_half<-as.data.frame(t(train_data_first_half))
write.csv(train_data_first_half, "D:\\MOGONET-main\\5\\1_tr.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
train_data_second_half<-as.data.frame(t(train_data_second_half))
write.csv(train_data_second_half, "D:\\MOGONET-main\\5\\2_tr.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
test_data_first_half<-as.data.frame(t(test_data_first_half))
write.csv(test_data_first_half, "D:\\MOGONET-main\\5\\1_te.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
test_data_second_half<-as.data.frame(t(test_data_second_half))
write.csv(train_data_second_half, "D:\\MOGONET-main\\5\\2_te.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
write.csv(train_labels, "D:\\MOGONET-main\\5\\label_train.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(test_labels, "D:\\MOGONET-main\\5\\label_test.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(train_labels$CLAUDIN_SUBTYPE, "D:\\MOGONET-main\\5\\labels_tr.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(test_labels$CLAUDIN_SUBTYPE, "D:\\MOGONET-main\\5\\labels_te.csv", row.names = FALSE)  # 替换为您想要保存的路径
###外部测试集
term_e<-read.csv("D:\\验证（乳腺癌亚型）\\数据（更新）\\验\\BRCA_term_1551.csv", header = TRUE, stringsAsFactors = FALSE)
load("D:\\验证（乳腺癌亚型）\\数据（更新）\\验\\label_wai.RData")
View(label)
View(term_e)
View(label)
View(term_e)
first_half <- term_e[1:343, ]
second_half <- term_e[-(1:343), ]
first_half<-as.data.frame(t(first_half))
View(first_half)
write.csv(first_half, "D:\\MOGONET-main\\外部验证\\1_ext.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
write.csv(first_half, "D:\\MOGONET-main\\外部验证\\1_ext.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
second_half<-as.data.frame(t(second_half))
write.csv(second_half, "D:\\MOGONET-main\\外部验证\\2_ext.csv", row.names = FALSE, col.names = FALSE)  # 替换为您想要保存的路径
write.csv(label, "D:\\MOGONET-main\\外部验证\\labels.csv", row.names = FALSE)  # 替换为您想要保存的路径
write.csv(label$PAM50Call_RNAseq, "D:\\MOGONET-main\\外部验证\\labels_ext.csv", row.names = FALSE)  # 替换为您想要保存的路径
